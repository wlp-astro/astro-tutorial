{
  "version": 3,
  "sources": ["../../@astrojs/svelte/dist/client.svelte.js"],
  "sourcesContent": ["import { createRawSnippet, hydrate, mount, unmount } from \"svelte\";\nconst existingApplications = /* @__PURE__ */ new WeakMap();\nvar client_svelte_default = (element) => {\n  return async (Component, props, slotted, { client }) => {\n    if (!element.hasAttribute(\"ssr\")) return;\n    let children = void 0;\n    let _$$slots = void 0;\n    let renderFns = {};\n    for (const [key, value] of Object.entries(slotted)) {\n      _$$slots ??= {};\n      if (key === \"default\") {\n        _$$slots.default = true;\n        children = createRawSnippet(() => ({\n          render: () => `<astro-slot>${value}</astro-slot>`\n        }));\n      } else {\n        _$$slots[key] = createRawSnippet(() => ({\n          render: () => `<astro-slot name=\"${key}\">${value}</astro-slot>`\n        }));\n      }\n      if (key === \"default\") {\n        renderFns.children = createRawSnippet(() => ({\n          render: () => `<astro-slot>${value}</astro-slot>`\n        }));\n      } else {\n        renderFns[key] = createRawSnippet(() => ({\n          render: () => `<astro-slot name=\"${key}\">${value}</astro-slot>`\n        }));\n      }\n    }\n    const resolvedProps = {\n      ...props,\n      children,\n      $$slots: _$$slots,\n      ...renderFns\n    };\n    if (existingApplications.has(element)) {\n      existingApplications.get(element).setProps(resolvedProps);\n    } else {\n      const component = createComponent(Component, element, resolvedProps, client !== \"only\");\n      existingApplications.set(element, component);\n      element.addEventListener(\"astro:unmount\", () => component.destroy(), { once: true });\n    }\n  };\n};\nfunction createComponent(Component, target, props, shouldHydrate) {\n  let propsState = $state(props);\n  const bootstrap = shouldHydrate ? hydrate : mount;\n  if (!shouldHydrate) {\n    target.innerHTML = \"\";\n  }\n  const component = bootstrap(Component, { target, props: propsState });\n  return {\n    setProps(newProps) {\n      Object.assign(propsState, newProps);\n      for (const key in propsState) {\n        if (!(key in newProps)) {\n          delete propsState[key];\n        }\n      }\n    },\n    destroy() {\n      unmount(component);\n    }\n  };\n}\nexport {\n  client_svelte_default as default\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;IACM,uBAAoB,oBAAuB,QAAO;IACpD,wBAAqB,CAAI,YAAY;gBACzB,WAAW,OAAO,SAAO,EAAI,OAAM,MAAO;SACjD,QAAQ,aAAa,KAAK,EAAA;QAC3B,WAAQ;QACR,WAAQ;QACR,YAAS,CAAA;gBACD,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,GAAG;AAClD,8BAAQ,CAAA;wBACJ,KAAQ,SAAS,GAAE;AACrB,iBAAS,UAAU;AACnB,mBAAW,iBAAgB,OAAA,EACzB,QAAM,MAAA,eAAuB,KAAK,gBAAA,EAAA;MAEtC,OAAO;AACL,iBAAS,GAAG,IAAI,iBAAgB,OAAA;UAC9B,QAAM,MAAA,qBAA6B,GAAG,KAAK,KAAK;;MAEpD;wBACI,KAAQ,SAAS,GAAE;AACrB,kBAAU,WAAW,iBAAgB,OAAA,EACnC,QAAM,MAAA,eAAuB,KAAK,gBAAA,EAAA;MAEtC,OAAO;AACL,kBAAU,GAAG,IAAI,iBAAgB,OAAA;UAC/B,QAAM,MAAA,qBAA6B,GAAG,KAAK,KAAK;;MAEpD;IACF;UACM,gBAAa,EAAA,GACd,OACH,UACA,SAAS,UAAQ,GACd,UAAS;QAEV,qBAAqB,IAAI,OAAO,GAAG;AACrC,2BAAqB,IAAI,OAAO,EAAE,SAAS,aAAa;IAC1D,OAAO;YACC,YAAY,gBAAgB,WAAW,SAAS,eAAa,cAAE,QAAW,QAAM,KAAA,CAAA;AACtF,2BAAqB,IAAI,SAAS,SAAS;AAC3C,cAAQ,iBAAiB,iBAAe,MAAQ,UAAU,QAAO,GAAA,EAAM,MAAM,KAAI,CAAA;IACnF;EACF;AACF;SACS,gBAAgB,WAAW,QAAQ,OAAO,eAAe;MAC5D,aAAU,UAAA,MAAU,KAAK,GAAA,YAAA;QACvB,YAAY,gBAAgB,UAAU;OACvC,eAAe;AAClB,WAAO,YAAY;EACrB;QACM,YAAY,UAAU,WAAS,EAAI,QAAQ,OAAO,WAAU,CAAA;;IAEhE,SAAS,UAAU;AACjB,aAAO,OAAO,YAAY,QAAQ;iBACvB,OAAO,YAAY;cACtB,OAAO,WAAW;iBACf,WAAW,GAAG;QACvB;MACF;IACF;IACA,UAAU;AACR,cAAQ,SAAS;IACnB;;AAEJ;",
  "names": []
}
